import Head from "next/head";
import Image from 'next/image';
import Link from 'next/link'
import AuthSlider from "../../../components/auth-slider";
import Google_Icon from '../../public/images/google-icon.png';
import Github_Icon from '../../public/images/github-icon.png';
import React from "react";
import { useState, useEffect } from "react";
import axios from 'axios';
import { useRouter } from 'next/navigation';
import { getCsrfToken, signIn } from "next-auth/react";
// import useStore from "../../hooks/useStore";
import toastcomp from "../../../components/toast";

export default function SignIn() {
  
  const router = useRouter();
  const [errorMsg,setErrorMsg]=useState('Account already Exist, Try Again');
  const errdict = {
    'OAuthSignin':'Error in constructing an authorization URL',
    'OAuthCallback': 'Error in handling the response (1, 2, 3) from an OAuth provider.',
    'OAuthCreateAccount': 'Could not create OAuth provider user in the database.',
    'EmailCreateAccount': 'Could not create email provider user in the database.',
    'Callback': 'Error in the OAuth callback handler route, Account already exist..',
    'OAuthAccountNotLinked': 'If the email on the account is already linked, but not with this OAuth account',
    'EmailSignin': 'Sending the e-mail with the verification token failed',
    'CredentialsSignin': 'The authorize callback returned null in the Credentials provider. We do not recommend providing information about which part of the credentials were wrong, as it might be abused by malicious hackers.',
    'SessionRequired': 'The content of this page requires you to be signed in at all times. See useSession for configuration.',
    'Default': 'Catch all, will apply, if none of the above matched',
  }
  
  useEffect(() => {
    const search = window.location.search;
    const params = new URLSearchParams(search);
    if(params.get('error')){
      setErrorMsg(errdict[params.get('error')]);
    }
  }, [])
  

  

  async function handleClick(event) {
    event.preventDefault();
    router.back();
  }

  return (
    <>
      <Head>
        <title>Sign In</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-[#FAF8FF]">
        <section className="py-12">
          <div className="mx-auto max-w-[1200px] w-full px-4 flex flex-wrap items-center">
            <div className="mb-6 lg:mb-0 lg:pr-20 w-full lg:w-[40%] hidden lg:block">
              <AuthSlider />
            </div>
            <div className="w-full lg:w-[60%]">
              <div className="bg-white shadow-normal border border-teal-400 rounded-[30px] p-10 lg:px-24 min-h-[550px] flex flex-col justify-center">
                <h1 className="font-medium text-3xl mb-12">
                  Error
                </h1>
                  <p className="font-medium mb-2 leading-none inline-block">{errorMsg}</p>
                  <button type="button" className="disabled:opacity-30 disabled:cursor-normal bg-gradient-to-r from-[#6D27F9] to-[#9F09FB] text-white font-bold rounded-full py-2.5 px-6 md:min-w-[200px] transition-all hover:from-[#391188] hover:to-[#391188] mt-6" onClick={(e) => handleClick(e)}>
                    Go Back
                    <i className="fa-solid fa-arrow-right-to-bracket ml-2"></i>
                  </button>

                      
                  </div>
            </div>
          </div>
        </section>
      </main>
    </>
  );
}
